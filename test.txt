If you are one of those (un?)lucky programmers who started programming in 90's when OO has taken the world of programming by storm. Particularly if you were one of the first adopters of Java language the JDK 1.0, and you happen to write Applets running inside NetScape browser, then it may not be difficult for you to understand why Functional Programming is so difficult. 
Back in 1996, the gang-of-four patterns in Object Oriented programming paradigm were as difficult as the monads and side-effects are in the FP parlance. gof is not gang-of-four, it is g compose f, the function composition in FP. I came in computer programming from a pure mathematics background after doing my graduation in advance maths. I remember that in my first C programming test, I failed in describing the function is C language as I though the function in C is f(x) where x ia a variable.
Those days lisp was considered synonym to artificial intelligence, and was only taught in AI course, no Haskell of course. When I entered in the industry Java and C++ has already taken over the industry and thinking of any functional programming was considered almost a sin.
But the times have changed, the functional programming concepts are so common now that they finally made their way into Java. And they are the basis for all the modern application frameworks. 
And I am excited, In this chapter I am going to apply some of the functional programming key concepts in Automation. Three key areas in automation can benefit equally from key concepts of functional programming.
1, Test Automation : Over the years, test automation has been the most active area in automation, the UI testing patterns like Page Objects, RestFul api testing patterns and performance testing all have evolved over a long period of time. Some of the functional programming concepts are very relevant in the context of test automation. Besides testing the functional programming code itself is different from testing the "non-functional" code with side-effects.
2. Pipelines : The CI/CD pipeline automation is one of the most challenging area in today's software development. The immutability of pipeline, the parallel execution of pipeline stages and several other aspects of pipeline automation can benefit from functional programming costructs like monads and function composition.
3. Managment/Monitoring: In the context of modern application architecture like Single Page Application based on Microservices architecture running on cloud inside containers, the automation of managing the services and infrastructure is a gigantic task. Different cloud service providers provide different tools for managing the services and platform. Similarly monitoring the services and platform is another challenging area in cloud based applications. Both of these areas can benefit from certain key functional programming concepts. A good automation framework can abstract certain aspects of monitoring and managment using functional programming approach.

In the following chapters, we shall look in detail all of the above areas and discuss the automation framework using functional programming concepts.

But before that, let me start with some key concepts in functional programming parlance.

1. Immutability: Immutablity is one of the key aspect of functional programming paradigm, the FP languages enforce immutablity by design. In the context of Automation, immutablity is probably the most critical aspect. From immutable docker containers to immutable test environments using mocks, immutablity plays the key role in designing a good automation framework. 
2. (Function) Composition: Composition is another key concepts in functional progamming. I put the title of this chapter g composes f to show the importance of the function composition. It is indeed one of the most difficult concept to understand if you don't have a mathematics background and have not attended category theory classes. Functional composition however is the easiest to implement as it is probably much more intuitive then most of the OO patterns. CI/CD pipelines are indeed the simple composition of the difference functions. I would discuss in detail how to design and implement a pure functional pipeline using groovy in Jenkins.
3. Monads/Side-effects: Monads are perhaps the most dreaded concepts of functional programming paradigm for the mortal Java programmers. When Java 8 introduced Optional, there was a debate on whether it follows the "Monadic" laws are not. Use of Monads in Automation particularly in the Test Automation framework, we discuss and implement the stateMonad in our UI automation framework.




